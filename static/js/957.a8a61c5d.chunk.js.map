{"version":3,"file":"static/js/957.a8a61c5d.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { register } from \"../../redux/auth/operations\";\nimport { Button, Form, Input } from \"antd\";\n\nconst RegisterForm = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector((state) => state.auth);\n\n  const onFinish = (values) => {\n    const { name, email, password, confirm } = values;\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n      !isLoading && !error && form.resetFields();\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      form.submit();\n    }\n  };\n\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 16,\n        offset: 4,\n      },\n    },\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      size={\"default\"}\n      initialValues={{\n        residence: [\"zhejiang\", \"hangzhou\", \"xihu\"],\n        prefix: \"86\",\n      }}\n      style={{\n        width: 300,\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        rules={[\n          {\n            type: \"email\",\n            message: \"E-mail is not valid!\",\n          },\n          {\n            required: false,\n            message: \"Please input your E-mail!\",\n          },\n        ]}\n      >\n        <Input placeholder=\"E-mail\" onKeyDown={handleKeyDown} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        rules={[\n          {\n            required: false,\n            message: \"Please input your password!\",\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password placeholder=\"Password\" onKeyDown={handleKeyDown} />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        dependencies={[\"password\"]}\n        hasFeedback\n        rules={[\n          {\n            required: false,\n            message: \"Please confirm your password!\",\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue(\"password\") === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error(\"Passwords does not match!\"));\n            },\n          }),\n        ]}\n      >\n        <Input.Password\n          placeholder=\"Confirm Password\"\n          onKeyDown={handleKeyDown}\n        />\n      </Form.Item>\n\n      <Form.Item\n        name=\"name\"\n        rules={[\n          {\n            required: false,\n            message: \"Please input your name!\",\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input placeholder=\"Name\" onKeyDown={handleKeyDown} />\n      </Form.Item>\n\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" onClick={() => form.submit()}>\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet, HelmetProvider } from \"react-helmet-async\";\n\nimport RegisterForm from \"../components/RegistrationForm/RegistrationForm\";\n\nexport default function Register() {\n  return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n      </div>\n    </HelmetProvider>\n  );\n}\n"],"names":["_Form$useForm","Form","form","_slicedToArray","dispatch","useDispatch","_useSelector","useSelector","state","auth","isLoading","error","handleKeyDown","e","key","submit","_jsxs","name","onFinish","values","email","password","confirm","register","resetFields","size","initialValues","residence","prefix","style","width","scrollToFirstError","children","_jsx","rules","type","message","required","Input","placeholder","onKeyDown","hasFeedback","dependencies","_ref","getFieldValue","validator","_","value","Promise","reject","Error","resolve","whitespace","_objectSpread","wrapperCol","xs","span","offset","sm","Button","htmlType","onClick","Register","HelmetProvider","Helmet","RegisterForm"],"sourceRoot":""}